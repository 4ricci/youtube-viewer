#!/usr/bin/perl
#
# Copyright (C) 2010-2011 Trizen <echo dHJpemVueEBnbWFpbC5jb20K | base64 -d>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#-------------------------------------------------------
#  (C) 2010-2011 by Trizen
#  Created on: 02 Jun 2010
#  Latest edit on: 05 May 2011
#  Website: http://trizen.go.ro
#  Email: echo dHJpemVueEBnbWFpbC5jb20K | base64 -d
#-------------------------------------------------------
#
# [?] What is this script for?
#  - This script is useful if do you hate the Flash Player and love YouTube.
#  - Using this script you can search and stream YouTube Videos with MPlayer...
#  - Have fun!
#
# [!] Most important changes are written in the changelog!
#
# [CHANGELOG]
# - Added support for today and all time Youtube tops (usage: -t, --tops, -a, --all-time)      - NEW (v2.4.*)
# - Re-added the support for the next page / Added support for download (-d, --download)       - NEW (v2.4.*)
# - Added support for youtube subtitles. (Depends on: 'gcap' - http://gcap.googlecode.com)     - NEW (v2.4.*)
# - First version with Windows support. Require SMPlayer to play videos. See MPlayer Line      - NEW (v2.4.*)
# - Code has been changed in a proportion of ~60% and optimized for speed // --480 became -4   - NEW (v2.4.*)
# - Added mega-powers of omnibox to the STDIN :)                                               - (v2.3.*)
# - Re-added the option to list and play youtube videos from a user profile. Usage: -u [user]  - (v2.3.*)
# - Added a new option to play only the audio track of a videoclip. Usage: [words] -n          - (v2.3.*)
# - Added option for fullscreen (-f, --fullscreen). Usage: youtube-viewer [words] -f           - (v2.3.*)
# - Added one new option '-c'. It shows available categories and will let you to choose one.   - (v2.3.*)
# - Added one new option '-m'. It shows 3 pages of youtube video results. Usage: [words] -m    - (v2.3.*)
# - For "-p" option has been added 3 pages of youtube video results (60 clips)                 - (v2.3.*)
# - Added "-prefer-ipv4" to the mplayer line (videoclips starts in no time now).               - (v2.3.*)
# - Search and play videos at 480p, 720p. Ex: [words] --480, [words] -p --480                  - (v2.3.*)
# - Search has been corrected due to some YouTube changes...                                   - (v2.2.*)
# - Added support to play a video at 480p even if it's resolution is higher. Ex: [url] --480   - (v2.2.*)
# - Added a nice feature which prints some informations about the video which you watching at  - (v2.2.*)
# - Added support to play videos by your order. Example: after search results, insert: 3 5 2 1 - (v2.1.*)
# - Added support for next pages of video results (press ENTER when ask you to insert number)  - (v2.1.*)
# - Bug fixed: "Numbers go crazy after more than 20 video results".                            - (v2.1.*)
# - Added support to continue playing searched videos, usage: "youtube-viewer [words] -p"      - (v2.1.*)
# - Added support to print counted videos and support to insert the number of video to play it - (v2.1.*)
# - Added support to search YouTube Videos in script (ex: youtube-viewer avatar trailer 2009)  - (v2.0.*)
# - Added support for script to choose automat quality if it is lower than 1080p               - (v2.0.*)
# - Added support to choose the quality only between 720p and 1080p (if it is available)       - (v2.0.*)
# - Added support for an YouTube video code (ex: youtube-viewer WVTWCPoUt8w)                   - (v1.0.*)
# - Added support for 720p and 1080p YouTube Videos...                                         - (v1.0.*)

# Special thanks to:
# - Army (for bugs reports and for his great ideas)
# - dhn (for adding youtube-viewer in freshports.org)

use URI::Escape;
use HTML::Entities;
$os                   = $^O;
$appname              = 'youtube-viewer';
$version              = '2.4.11';
$mplayer_settings     = '-prefer-ipv4 -cache 30000 -cache-min 5';
$MPlayer_srt_settings = '-unicode -utf8';
if ( $os =~ /MSWin/ ) {
    $MPlayer_exe = 'C:\\Program Files\\SMPlayer\\mplayer\\mplayer.exe';
    unless ( -e $MPlayer_exe ) {
        warn "\n\n!!! Please install SMPlayer to stream Youtube videos.\n\n";
        sleep 2;
    }
    $MPlayerLine = qq["$MPlayer_exe" $mplayer_settings];
}
else {
    $MPlayerLine = "mplayer $mplayer_settings";
}

sub UserAgent {
    require LWP::UserAgent;
    $lwp = 'LWP::UserAgent'->new;
    $lwp->agent('Mozilla/5.0 (X11; U; Linux i686; en-US) Chrome/10.0.648.45');
    $lwp->env_proxy;
    $lwp->timeout(15);
    if ($debug) {
        $lwp->show_progress(1);
    }
    $lwp_is_set = 1;
}
if ( not $os =~ /^MSWin/ ) {
    $bred   = "\e[1;31m";
    $bgreen = "\e[1;32m";
    $reset  = "\e[0m";
}
else {
    $bred   = '';
    $bgreen = '';
    $reset  = '';
}
$all_args = join( '', @ARGV );
foreach $arg (@ARGV) {
    if ( $arg =~ /^-/ ) {
        $SearchBackup .= " $arg ";
    }
    else {
        $Search .= "$arg ";
    }
    next unless $arg =~ /^-/;
    if ( $arg =~ /^[-]+(?:n|no[-_]?video)$/i ) {
        $MPlayerLine =~ s/mplayer /mplayer -novideo /;
        $MPlayerLine =~ s/mplayer\.exe"/mplayer.exe" -novideo/;
        $SearchBackup .= ' --480';
        next;
    }
    if ( $arg =~ /^[-]+(?:sub|lang)=([\w]+)$/i ) {
        $default_sub = lc $1;
        next;
    }
    if ( $arg =~ /^[-]+(?:d|download)$/ ) {
        $Download_video = 1;
        next;
    }
    if ( $arg =~ /^[-]+(?:a|all[-_]?time)$/i ) {
        $all_time = 1;
        next;
    }
    if ( $arg =~ /^[-]+(?:c|categories)$/i ) {
        $categories = 1;
        next;
    }
    if ( $arg eq '--debug' ) {
        $debug = 1;
        next;
    }
    if ( $arg =~ /^[-]+(?:m|more)$/i or $arg =~ /^[-]+(?:p|playback)$/i ) {
        $MoreResults = 1;
        next;
    }
    if ( $arg =~ /^[-]+(?:fs?|fullscreen)$/ ) {
        $MPlayerLine =~ s/mplayer /mplayer -fs /;
        $MPlayerLine =~ s/mplayer.exe"/mplayer.exe" -fs/;
    }
}
$SearchBackup ||= '';
$default_sub  ||= 'en';
$Search       ||= '';
foreach $arg (@ARGV) {
    if ( $arg =~ /^[-]+(?:h|help|\?)$/ ) {
        &help;
    }
    if ( $arg =~ /^[-]+(?:v|version)$/ ) {
        &version;
    }
    ++$i;
    if ( $arg eq '-c' ) {
        &Categories_area;
    }
    if ( $arg =~ /^[-]+(?:a|all[_-]?time|t|tops)$/ ) {
        &youtube_tops;
    }
    if ( $arg =~ /^[-]+(?:u|username)$/ ) {
        if ( $ARGV[$i] ) {
            unless ( $ARGV[$i] =~ /^-/ ) {
                $user = $ARGV[$i];
            }
        }
        unless ($user) {
            $i -= 2;
            if ( $ARGV[$i] ) {
                unless ( $ARGV[$i] =~ /^-/ ) {
                    $user = $ARGV[$i];
                }
            }
        }
        if ($user) {
            &Videos_from_username($user);
        }
    }
}
foreach $_ (@ARGV) {
    if ( not $_ =~ /^-/ or length $_ == 11 ) {
        $non_argv = 1;
        last;
    }
}
unless ($non_argv) {
    &InsertURL;
}
foreach $code (@ARGV) {
    if ( $code =~ /^([\w-]{11})$/ ) {
        $code = $1;
        if ( $code =~ /[\d]+|[A-Z]+|-/ ) {
            $dont_exit = 1;
            undef $title;
            if ( length $code == 11 ) {
                &GetYouTube;
            }
            else {
                next;
            }
        }
    }
    elsif ( $code =~ m[(?:v|embed)[=/]+([\w-]{11})] ) {
        $code      = $1;
        $dont_exit = 1;
        undef $title;
        if ( length $code == 11 ) {
            &GetYouTube;
        }
        else {
            next;
        }
    }
    elsif ( $code =~ m[^http://] and not $code =~ /youtube\.com/ ) {
        &code_from_content($code);
    }
    else {
        next;
    }
}

sub help {
    $appname = uc $appname;
    die "\n\t"
      . '=' x 25
      . " $appname "
      . '=' x 25
      . qq[
\t\t\t\t\t\t  by Trizen (trizen.go.ro)
\n Usage: youtube-viewer [<url> | <video_id>] [-(4|7|1)]
                       [-u <username>] [-categories] [-(a|t)]
                       [<keywords>] [-fs] [-novideo] [-(m|p)]
\nBase Options: youtube-viewer [...]
   <url>                : play an YouTube video by URL
   <code>               : play an YouTube video by code
   <keywords>           : search and play YouTube videos
   -v, --version        : prints version and exits
   -h, --help           : prints help and exits
\nOther options:
   -t, --tops           : shows today Youtube tops
   -a, --all-time       : shows all time Youtube tops
   -c, --categories     : shows available YouTube categories
   -n, --novideo        : plays only the audio track of video(s)
   -d, --download       : downloads youtube video(s) with LWP
   -m, --more           : shows more video results (50 clips)
   -f, --fullscreen     : plays all videos in fullscreen mode
   -p, --playback       : plays all video results in order
   -4, --480, -7        : plays video results at 480p resolution (or 720p)
   -u <username>        : lists videos from a YouTube user profile
   -sub=<LANG>          : subtitle language (default: en) (depends on gcap)
\nTips and tricks:
  1. After search results, you can insert: 3 5 8 1 to play videos in your order
  2. Play all audio tracks of video results by adding "-p -n" after keywords.
  3. Play all video results in fullscreen mode at 720p: "<keywords> -p -f -7"
  4. Play all videos from a user at 480p: "<username> -u -4" and insert "all"
  5. After search results, press <ENTER> for the next page
\n];
}

sub version {
    print "Youtube Viewer $version\n";
    exit;
}

sub code_from_content {
    undef $title    if $title;
    undef $duration if $duration;
    undef $rating   if $rating;
    undef $views    if $views;
    $url = $_[0];
    unless ($lwp_is_set) {
        &UserAgent;
    }
    $connect = $lwp->get($url);
    if ( $connect->content =~ m[youtube\.com/(?:v|embed)/([\w-]{11})] ) {
        $code = $1;
        if ( length $code == 11 ) {
            &GetYouTube;
        }
        else {
            next;
        }
    }
}

sub InsertURL {
    print "\n$bred=>>$reset$bgreen "
      . "Insert an YouTube URL or search something...\n$reset> ";
    chomp( $youtube = <STDIN> );
    if ( $youtube =~ m[(?:v|embed)[=/]+([\w-]{11})] ) {
        $code = $1;
        &GetYouTube;
    }
    elsif ( $youtube =~ m[^http://] and not $youtube =~ /youtube\.com/ ) {
        &code_from_content($youtube);
    }
    elsif ($youtube) {
        $SearchBackup .= ' ' . $youtube;
        $Search = $youtube;
        $number = 0;
        &Trizen;
    }
    else {
        print $bred;
        print "\n(x_x) Unable to continue...\n\n";
        print $reset;
        exit;
    }
}

sub Videos_from_username {
    $username   = 1;
    $yt_api_url = "http://gdata.youtube.com/feeds/api/users/$_[0]/uploads";
    &YoutubeAPI;
}

sub youtube_tops {
    $username = 1;
    print "\n";
    $n = 0;
    unless ($all_time) {
        $today = 1;
    }
    $youtube_top_url = 'http://gdata.youtube.com/feeds/api/standardfeeds';
    foreach $line (
        'top_rated',      'top_favorites',
        'most_viewed',    'most_popular',
        'most_recent',    'most_discussed',
        'most_responded', 'recently_featured'
      )
    {
        ++$n;
        $top_name = ucfirst $line;
        $top_name =~ s/_/ /;
        print "$bred$n$reset - $top_name\n";
        push @tops, "$n - $youtube_top_url/$line";
    }
    print "\n$bred=>>$bgreen Pick one of$reset\n> ";
    chomp( $pick = quotemeta <STDIN> );
    foreach $_ (@tops) {
        if ( $_ =~ /^$pick - (.+)/ ) {
            $yt_api_url = $1;
            if ($today) {
                unless ( $yt_api_url =~ /recent/ ) {
                    $yt_api_url .= '?time=today';
                }
            }
            &YoutubeAPI;
        }
    }
}

sub Categories_area {
    unless ($lwp_is_set) {
        &UserAgent;
    }
    $content =
      $lwp->get('http://gdata.youtube.com/schemas/2007/categories.cat')
      ->content;
    $content =~ s/category term=/\ncategory_name=/g;
    @cates = split( ?\n?, $content, 0 );
    $n = 0;
    print "\n";
    foreach $cat (@cates) {
        if ( $cat =~ /category_name='([^']+)' label='([^']+)'/
            and not $cat =~ /deprecated/ )
        {
            ++$n;
            $cat_name  = $1;
            $cat_label = $2;
            $cat_label = decode_entities($cat_label);
            if ( $n < 10 ) {
                print ' ';
            }
            print "$bred$n$reset - $cat_label\n";
            push @categories, "$n - $cat_name";
        }
    }
    print $bgreen;
    print "\n=>> Insert a category number\n> ";
    print $reset;
    chomp( $pickcat = quotemeta <STDIN> );
    foreach $cat (@categories) {
        if ( $cat =~ /^$pickcat - (.+)/ ) {
            $yt_api_url = 'http://gdata.youtube.com/feeds/api/standardfeeds/'
              . "recently_featured_$1";
            &YoutubeAPI;
        }
    }
}

sub MPlayer {
    undef $youtube;
    if ($debug) {
        print "STREAMING: $streaming\n\n";
    }
    if ($Download_video) {
        $title =~ s[/][|]g;
        $lwp->show_progress(1);
        $lwp->mirror( $streaming, "$title.mp4" );
        $lwp->show_progress(0);
    }
    else {
        `$MPlayerLine "$streaming"`;
    }
    print "\n";
    if ($Picks) {
        &ForeachPick;
    }
    if ( $Search =~ m[[=/]+([\w-]{11})] and not $dont_exit ) {
        exit;
    }
    if ( $Search or $categories or $username ) {
        unless ($dont_exit) {
            $category = '';
            $rating   = '';
            $date     = '';
            &PrintResults;
        }
    }
    unless ($dont_exit) {
        exit;
    }
}

sub YoutubeAPI {
    $#Videos         = -1;
    $youtube_via_api = 1;
    if ($MoreResults) {
        $results = 50;
    }
    else {
        $results = 20;
    }
    $start_index = 1;
    if ( not $yt_api_url =~ /\?/ ) {
        $yt_api_url .= "?start-index=$start_index&max-results=$results";
    }
    else {
        $yt_api_url .= "&start-index=$start_index&max-results=$results";
    }
    unless ($lwp_is_set) {
        &UserAgent;
    }
    $cc = $lwp->get($yt_api_url)->content;
    if ( $cc eq 'User not found' ) {
        die "\n(x_x) $cc...\n\n";
    }
    &Parse;
    &PrintResults;
    $youtube_via_api = 0;
}
unless ($dont_exit) {
    &Trizen;
}

sub Trizen {
    $PageNumber = 1;
    $FirstPage  = 1;
    $Search =~ s/^\s+|\s+$//g;
    $Search = uri_escape($Search);
    if ($MoreResults) {
        $results = 50;
    }
    else {
        $results = 20;
    }
    $ys =
        'http://gdata.youtube.com/feeds/api/videos?q='
      . $Search
      . "&max-results=$results";
    $start_index = 1;
    $ys .= "&start-index=$start_index";
    unless ($lwp_is_set) {
        &UserAgent;
    }
    $connect = $lwp->get($ys);
    @content = split( ?\n?, $connect->content, 0 );
    &Search;
}

sub Search {
    $cc = join( '', @content );
    &Parse;
    &PrintResults;
}

sub Parse {
    $#Videos = -1;
    $cc =~ s/\n//g;
    $cc =~ s/<title type='text'>/\nTITLE=/g;
    @content = split( ?\n?, $cc, 0 );
    foreach $_ (@content) {
        next unless $_ =~ /^TITLE=/;
        if ( $_ =~ m[<name>([^<]+)</name>] ) {
            $video_line = "<author=$1>";
        }
        if ( $_ =~
            m[^TITLE=([^<]+)</title>.+v=([\w-]{11}).+duration[^']*'([\d:]+)'] )
        {
            $video_line .= "<v=$2><title=$1><time=$3>";
        }
        if ( $_ =~ /viewCount='([\d]*)'/ ) {
            $video_line .= "<views=$1>";
        }
        else {
            $video_line .= '<views=0>';
        }
        if ( $_ =~ /<media:description type='plain'>([^<]*)/ ) {
            $video_line .= "<description=$1";
        }
        else {
            $video_line .= '<description=No description available...';
        }
        push @Videos, $video_line;
    }
}

sub PrintResults {
    $#codes = -1;
    $number = 0;
    print "\n";
    foreach $line (@Videos) {
        if ( $line =~
/^<author=([^>]+)><v=([^>]+)><title=([^>]+)><time=([^>]*)><views=([^>]*)><description=(.*)/
          )
        {
            ++$number;
            $author = $1;
            $code   = $2;
            $title  = decode_entities($3);
            $time   = $4;
            $views  = $5;
            $desc   = decode_entities($6);
            unless ( $time =~ /:/ ) {
                $sec = $time;
                $time =
                  $sec / 3600 % 24 . ':' . $sec / 60 % 60 . ':' . $sec % 60;
                $time =~ s/^0://;
                unless ( $time =~ /:/ ) {
                    $time = "0:$time";
                }
                if ( $time =~ /(.):(.):(.+)/ ) {
                    $time = "$1:0$2:$3";
                }
                if ( $time =~ /^(.+):(.)$/ ) {
                    $time = "$1:0$2";
                }
            }
            push @codes, "$number>title=$title>time=$time>code="
              . "$code>views=$views>desc=$desc";
            print "$bred";
            if ( $number < 10 ) {
                print ' ';
            }
            print "$number$reset - $title (by $author) ($time)\n$bred";
        }
    }
    if ($SearchBackup) {
        if ( $SearchBackup =~ / -p/ ) {
            for ( $i = 1 ; $i <= $number ; ++$i ) {
                push @picks2, "$i ";
            }
            $SearchBackup =~ s/ -p//g;
            $youtube = join( '', @picks2 );
            @picks = split( ' ', $youtube, 0 );
            &PicksArea;
        }
    }
    print "\n$bred=>>$reset$bgreen Insert a number or "
      . "search something else\n$reset> ";
    chomp( $youtube = <STDIN> );
    $PickBackup = $youtube;
    $SearchBackup .= ' ' . $youtube;
    if ( $youtube =~ /^(q|quit|exit)$/ ) {
        exit;
    }
    if ( $PickBackup =~ m[^http://] and not $PickBackup =~ /youtube\.com/ ) {
        &code_from_content($PickBackup);
    }
    if ( $PickBackup =~ /([\d]+) [-]+([\d]+)/ ) {
        $youtube = $1;
    }
    if ( $youtube =~ /^([\d]+)$/ ) {
        if ( $youtube > $number or not $youtube ) {
            print "\n";
            &PrintResults;
        }
        else {
            &ForeachCode($1);
        }
    }
    elsif ( not $youtube ) {
        $PageNumber = $FirstPage;
        ++$PageNumber;
        if ($ys) {
            if ( $ys =~ /index=([\d]+)/ ) {
                $old_index   = $1;
                $start_index = $old_index + $results;
                $ys =~ s/index=$old_index/index=$start_index/;
                $connect = $lwp->get($ys);
                @content = split( /\n/, $connect->content, 0 );
                print "\n";
                &Search;
            }
        }
        elsif ($yt_api_url) {
            $youtube_via_api = 1;
            $#Videos         = -1;
            $ys              = '';
            $youtube_via_api = 1;
            if ( $yt_api_url =~ /index=([\d]+)/ ) {
                $old_index   = $1;
                $start_index = $old_index + $results;
                $yt_api_url =~ s/index=$old_index/index=$start_index/;
                $cc = $lwp->get($yt_api_url)->content;
                &Parse;
                &PrintResults;
                $youtube_via_api = 0;
            }
        }
    }
    elsif ( $youtube eq 'all' ) {
        $SearchBackup .= ' --1080';
        $#picks = -1;
        for ( $i = 1 ; $i <= $number ; ++$i ) {
            push @picks, "$i";
        }
        &PicksArea;
    }
    elsif ( $youtube =~ m[v[=/]+([\w-]{11})] ) {
        $code = $1;
        undef $desc     if $desc;
        undef $title    if $title;
        undef $duration if $duration;
        undef $views    if $views;
        undef $category if $category;
        &GetYouTube;
    }
    elsif ( $youtube =~ /[\d]+ [\d]+/ ) {
        @picks = split( ' ', $youtube, 0 );
        &PicksArea;
    }
    elsif ($youtube) {
        $Search = $youtube;
        &Trizen;
    }
}

sub PicksArea {
    if (@picks) {
        $NrOfPicks = @picks;
    }
    $no       = 0;
    $lastpick = '';
    $number   = 0;
    &ForeachPick;
}

sub ForeachPick {
    for ( $number = $no ; $number <= $NrOfPicks ; ++$number ) {
        $no   = $number;
        $pick = $picks[$number];
        if ($pick) {
            next if $lastpick eq $pick;
        }
        &PrintResults if $number eq $NrOfPicks;
        $Picks    = 1;
        $lastpick = $pick;
        &ForeachCode($pick);
    }
}

sub ForeachCode {
    foreach $line (@codes) {
        if ($debug) {
            print "FOREACHCODE: $line\n\n";
        }
        if ( $line =~
/^$_[0]>title=(.+)>time=(.*)>code=([\w-]{11})>views=([\d]*)>desc=(.*)/
          )
        {
            $title    = $1;
            $duration = $2;
            $views    = $4;
            $code     = $3;
            $desc     = $5;
            &GetYouTube;
        }
    }
}

sub VideoCheck {
    $streaming =~ s/^[\w]*%[\w]*http:/http:/;
    if ( not $streaming =~ /itag=34/ and $streaming =~ /itag=([\d]+)[\W]+/ ) {
        $itag = $1;
        $streaming =~ s/.*http(.+)itag=$itag([^\%]*).+/http$1itag=$itag$2/;
        $streaming =~ s/%.*//;
        unless ( $SearchBackup =~ / [-]+f/ ) {
            $MPlayerLine =~ s/-fs //;
        }
        &Description;
        &MPlayer;
    }
    elsif ( $SearchBackup =~ / [-]+4/ ) {
        &lower_quality;
        &Description;
        &MPlayer;
    }
    elsif ( $SearchBackup =~ / [-]+7/ ) {
        if ( $streaming =~ /itag=22/ ) {
            $streaming =~ s/.*http(.+)itag=22([^\%]*).+/http$1itag=22$2/;
            &Fullscreen_check;
            &Description;
            &MPlayer;
        }
        else {
            &lower_quality;
            &Description;
            &MPlayer;
        }
    }
    elsif ( $SearchBackup =~ / [-]+1/ ) {
        if ( $streaming =~ /itag=37/ ) {
            $streaming =~ s/.*http(.+)itag=37([^\%]*).+/http$1itag=37$2/;
            &Fullscreen_check;
            &Description;
            &MPlayer;
        }
        elsif ( $streaming =~ /itag=22/ ) {
            $streaming =~ s/.*http(.+)itag=22([^\%]*).+/http$1itag=22$2/;
            &Fullscreen_check;
            &Description;
            &MPlayer;
        }
        else {
            &lower_quality;
            &Description;
            &MPlayer;
        }
    }
    elsif ( not $dont_exit && $all_args =~ / [-]+(1|7|4)/ ) {
        &Description;
        &ResolutionSearch;
    }
}

sub Description {
    if ( $connect->content =~ /rating average=['"]+([\d\.]+)/ ) {
        $rating = $1;
        $rating =~ s/^([\d\.]{4}).*/$1/;
    }
    elsif ( $connect->content =~ /avg_rating=([^&]+)/ ) {
        $rating = $1;
        $rating =~ s/^([\d\.]{4}).*/$1/;
    }
    unless ($title) {
        $feed_url = 'http://gdata.youtube.com/feeds/api/videos/' . $code;
        $connect  = $lwp->get($feed_url);
        if ( $connect->content =~
            m[media:title type='plain'>([^<]+)</media:title>] )
        {
            $title = decode_entities($1);
        }
        if ( $connect->content =~ /viewCount=['"]+([\d]+)/ ) {
            $views = $1;
        }
        if ( $connect->content =~ m[<published>([\d-]+)(.*)</published>] ) {
            chomp( $date = $1 );
            $date =~ s/-/./g;
            $date =~ s/(.+)\.(.+)\.(.+)/$3.$2.$1/;
        }
        else {
            $date = '';
        }
        if ( $connect->content =~
            m[<media:description type='plain'>([^<]+)</media] )
        {
            $desc = $1;
        }
        if ( $connect->content =~ m[<author><name>([^<]+)</name>] ) {
            $author = $1;
        }
        if ( $connect->content =~ /category label=['"]+([^'"]+)/ ) {
            $category = decode_entities($1);
        }
    }
    if ($desc) {
        print "\n$bred=>> $reset";
        print $bgreen;
        print "$title\n";
        print $reset;
        print '-' x 80;
        $description = decode_entities($desc);
        print "\n$description\n";
        print '-' x 80 . "\n";
    }
    else {
        print "\n";
    }
    print "$bred=>> $reset";
    print $bgreen;
    print "View & Download\n";
    print $reset;
    print '-' x 80;
    $get = $streaming;
    $get =~ s/http:([^\%]+)(.*)/http:$1/;
    $get =~ s/(.*)http/http/;
    $get =~ s/\\//g;
    print "\n* URL $url\n";
    print "* GET $get\n";
    print '-' x 80 . "\n";
    $count = $title =~ s/(.)/$1/gs;

    if ( $count <= 40 ) {
        print "$bred\t\t=>> ";
    }
    elsif ( $count >= 40 and $count <= 55 ) {
        print "$bred\t=>> ";
    }
    elsif ( $count >= 56 ) {
        print "$bred  =>> ";
    }
    print $bgreen;
    print "$title";
    print $reset;
    print "$bred <<=\n";
    print $reset;
    if ( $connect->content =~ /\&author=([^&]+)/ ) {
        $author = $1;
    }
    if ($author) {
        print "\n* Author: $author\n";
    }
    if ($duration) {
        print "* Duration: $duration\n";
    }
    if ($category) {
        print "* Category: $category\n";
    }
    if ($rating) {
        print "* Rating: $rating\n";
    }
    if ($views) {
        $views = reverse($views);
        $views =~ s/([\d]{3})/$1./g;
        $views = reverse($views);
        $views =~ s/^\.//;
        print "* Views: $views\n";
    }
    if ($date) {
        print "* Published: $date\n";
    }
    print '-' x 80 . "\n\n";
}

sub MPlayerLine_with_srt {
    $MPlayerLine .= " $MPlayer_srt_settings -sub $srt_file";
}

sub GetYouTube {
    $youtube = "http://www.youtube.com/get_video_info?&video_id=$code"
      . '&el=detailpage&ps=default&eurl=&gl=US&hl=en';
    unless ($lwp_is_set) {
        &UserAgent;
    }
    $connect = $lwp->get($youtube);
    $url     = "http://www.youtube.com/watch?v=$code";
    $MPlayerLine =~ s/ $MPlayer_srt_settings -sub.*//;
    if (    -e '/usr/bin/gcap'
        and not $MPlayerLine  =~ / -novideo/
        and $connect->content =~ /&has_cc=True&/
        and not $Download_video )
    {
        chdir '/tmp/';
        print "\n";
        system "gcap $url" unless -e "${code}_$default_sub.srt";
        @ls = glob('*.srt');
        undef $srt_file if $srt_file;
        foreach $line (@ls) {
            if ( $line =~ /${code}_$default_sub\.srt/ ) {
                $srt_file = "${code}_$default_sub.srt";
                &MPlayerLine_with_srt;
            }
        }
        unless ($srt_file) {
            foreach $line (@ls) {
                if ( $line =~ /$code([\w]*)\.srt/ ) {
                    $srt_file = "$code$1.srt";
                    &MPlayerLine_with_srt;
                }
            }
        }
    }
    if ($debug) {
        print "\n\n" . uri_unescape( $connect->content ) . "\n\n";
    }
    if ( $connect->content =~ /fmt_url_map=([^&]+)&/ ) {
        $streaming = $1;
        $streaming =~ s/%3A/:/gi;
        $streaming =~ s[%2F][/]gi;
        $streaming =~ s/%26/&/g;
        $streaming =~ s/%3D/=/gi;
        $streaming =~ s/%3F/?/gi;
        $streaming =~ s/%252C/,/gi;
        &VideoCheck;
    }
    else {
        $unable = "$bred(x_x) Unable to stream: $reset$url\n";
        print $bred;
        print "\n(x_x) Something went wrong...\n\n";
        print $reset;
        unless ( $SearchBackup =~ / -p/ and $NrOfPicks ) {
            print "$unable\n";
        }
        if ( $Search and not $dont_exit ) {
            unless ( $SearchBackup =~ / -p/ ) {
                sleep 1;
                &PrintResults;
            }
        }
        else {
            unless ( $categories or $username or $dont_exit ) {
                exit;
            }
        }
    }
}

sub ResolutionSearch {
    if ( $streaming =~ /itag=37/ and not $SearchBackup =~ / -p/ ) {
        &pick;
    }
    elsif ( $SearchBackup =~ / -p/ ) {
        if ( $streaming =~ /itag=37/ ) {
            $streaming =~ s/(.*)http(.+)itag=37([^\%]*)(.+)/http$2itag=37$3/;
            &Fullscreen_check;
            &Description;
            &MPlayer;
        }
    }
    elsif ( $streaming =~ /itag=22/ ) {
        $streaming =~ s/(.*)http(.+)itag=22([^\%]*)(.+)/http$2itag=22$3/;
        &Fullscreen_check;
        &MPlayer;
    }
    else {
        &lower_quality;
        &MPlayer;
    }
}

sub Fullscreen_check {
    $MPlayerLine =~ s/mplayer -p/mplayer -fs -p/;
    $MPlayerLine =~ s/mplayer.exe" -p/mplayer.exe" -fs -p/;
}

sub pick {
    print "$bred=>>$reset $bgreen Please choose "
      . 'the quality of video (default: 1)';
    print "\n$reset";
    print "\n  $bred 1$reset - 1280x720  (720p)\n"
      . "  $bred 2$reset - 1920x1080 (1080p)\n  ";
    print '=' x 23 . "\n";
    print $bgreen;
    print "\n=>> Pick format: ";
    print $reset;
    chomp( $pick = <STDIN> );
    print '-' x 80 . "\n\n";

    if ( $pick eq 2 ) {
        $streaming =~ s/(.*)http(.+)itag=37([^\%]*)(.+)/http$2itag=37$3/;
        &Fullscreen_check;
        &MPlayer;
    }
    else {
        $streaming =~ s/(.*)http(.+)itag=22([^\%]*)(.+)/http$2itag=22$3/;
        &Fullscreen_check;
        &MPlayer;
    }
}

sub lower_quality {
    foreach $_ ( 35, 34 ) {
        if ( $streaming =~ /itag=$_/ ) {
            $streaming =~ s/(.*)http(.+)itag=$_([^\%]*)(.+)/http$2itag=$_$3/;
            last;
        }
    }
    unless ( $SearchBackup =~ / [-]+f/ ) {
        $MPlayerLine =~ s/-fs //;
    }
}
